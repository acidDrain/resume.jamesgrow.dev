{"version":3,"sources":["header/Header.js","blurb/Blurb.js","learn-next/LearnNext.js","open-source/OpenSource.js","programming/Programming.js","side-projects/SideProjects.js","systems/Systems.js","vendor-tech/VendorTech.js","work-history/WorkItem.js","work-history/WorkHistory.js","App.js","serviceWorker.js","index.js"],"names":["name","email","title","github","linkedin","twitter","className","href","text","heading","split","map","t","key","learnNext","k","openSource","i","projectName","programming","language","components","component","sideProjects","sideProject","systems","platform","vendorTech","vendor","products","product","getYearMonthDay","d","ds","Date","Number","getMonth","getFullYear","Position","description","location","startDate","endDate","PositionList","positionList","p","company","positions","workHistory","wh","WorkItem","App","data","resume_data","sections","contactInfo","blurb","Component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6uXAGe,G,MAAA,gBAAGA,EAAH,EAAGA,KAAMC,EAAT,EAASA,MAAOC,EAAhB,EAAgBA,MAAOC,EAAvB,EAAuBA,OAAQC,EAA/B,EAA+BA,SAAUC,EAAzC,EAAyCA,QAAzC,OACb,4BAAQC,UAAU,UAChB,yBAAKA,UAAU,QACb,4BAAKN,IAEP,yBAAKM,UAAU,gBACb,4BAAKJ,IAEP,yBAAKI,UAAU,kBACb,wCACU,4BAAQA,UAAU,eAAeL,IAE3C,yCACW,uBAAGM,KAAMF,EAAQE,MAAOF,EAAQL,OAE3C,0CACY,uBAAGO,KAAMH,EAASG,MAAOH,EAASJ,OAE9C,wCACU,uBAAGO,KAAMJ,EAAOI,MAAOJ,EAAOH,WClB/B,G,MAAA,gBAAGQ,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAAT,OACb,yBAAKH,UAAU,SACZG,GACC,yBAAKH,UAAU,iBACb,4BAAKG,IAGRD,GACC,yBAAKF,UAAU,cACZE,EAAKE,MAAM,MAAMC,KAAI,SAAAC,GAAC,OACrB,uBAAGC,IAAKD,GAAIA,UCVP,G,MAAA,gBAAGE,EAAH,EAAGA,UAAH,OACb,yBAAKR,UAAU,cACb,yBAAKA,UAAU,oBACb,4DAEF,yBAAKA,UAAU,mBACZQ,EAAUH,KAAI,SAAAI,GAAC,OACd,wBAAIF,IAAG,UAAKE,IAAMA,UCPX,G,MAAA,gBAAGC,EAAH,EAAGA,WAAH,OACb,yBAAKV,UAAU,eACb,yBAAKA,UAAU,qBACb,4CAEF,yBAAKA,UAAU,oBACZU,EAAWL,KAAI,SAAAM,GAAC,OACf,wBAAIJ,IAAKI,EAAEC,aAAcD,EAAEC,oBCPpB,G,MAAA,gBAAGC,EAAH,EAAGA,YAAH,OACb,yBAAKb,UAAU,eACb,yBAAKA,UAAU,qBACb,qEAEDa,EAAYR,KAAI,SAAAM,GAAC,OAChB,yBAAKX,UAAU,mBAAmBO,IAAKI,EAAEG,UACvC,wBAAId,UAAU,wBAAwBW,EAAEG,UACxC,4BACGH,EAAEI,WAAWV,KAAI,SAAAW,GAAS,OACzB,wBAAIT,IAAKS,GAAYA,cCVlB,G,MAAA,gBAAGC,EAAH,EAAGA,aAAH,OACb,yBAAKjB,UAAU,iBACb,yBAAKA,UAAU,uBACb,oEAEF,yBAAKA,UAAU,sBACb,4BACGiB,EAAaZ,KAAI,SAAAa,GAAW,OAC3B,wBAAIX,IAAKW,GAAcA,WCRlB,G,MAAA,gBAAGC,EAAH,EAAGA,QAAH,OACb,yBAAKnB,UAAU,WACb,yBAAKA,UAAU,iBACb,wCAEDmB,EAAQd,KAAI,SAAAM,GAAC,OACZ,yBAAKX,UAAU,eAAeO,IAAKI,EAAES,UACnC,wBAAIpB,UAAU,oBAAoBW,EAAES,UACpC,4BACGT,EAAEI,WAAWV,KAAI,SAAAW,GAAS,OACzB,wBAAIT,IAAKS,GAAYA,cCVlB,G,MAAA,gBAAGK,EAAH,EAAGA,WAAH,OACb,yBAAKrB,UAAU,eACb,yBAAKA,UAAU,qBACb,6DAEDqB,EAAWhB,KAAI,SAAAM,GAAC,OACf,yBAAKX,UAAU,mBAAmBO,IAAKI,EAAEW,QACvC,wBAAItB,UAAU,eAAeW,EAAEW,QAC/B,4BACGX,EAAEY,SAASlB,KAAI,SAAAmB,GACd,OAAOA,EAAU,wBAAIjB,IAAKiB,GAAUA,GAAgB,gBCRhE,SAASC,EAAgBC,GACvB,GAAIA,EAAI,EAAG,MAAO,UAClB,IAAMC,EAAK,IAAIC,KAAKC,OAAOH,IAC3B,OAAOC,EAAGG,WAAa,GAAhB,UACAH,EAAGI,cADH,aACqBJ,EAAGG,WAAa,GADrC,UAEAH,EAAGI,cAFH,YAEoBJ,EAAGG,WAAa,GAG7C,IAAME,EAAW,SAAC,GAAD,IAAGpC,EAAH,EAAGA,MAAOqC,EAAV,EAAUA,YAAaC,EAAvB,EAAuBA,SAAUC,EAAjC,EAAiCA,UAAWC,EAA5C,EAA4CA,QAA5C,OACf,yBAAKpC,UAAU,yBACb,yBAAKA,UAAU,+BACb,4BAAKJ,IAEP,yBAAKI,UAAU,sBACZyB,EAAgBU,GADnB,MACkCV,EAAgBW,IAElD,yBAAKpC,UAAU,yBAAyBkC,GACxC,yBAAKlC,UAAU,4BACWiC,EArBhB7B,MAAM,MAAMC,KAAI,SAAAqB,GAAC,OAAI,2BAAIA,SA0BjCW,EAAe,SAAC,GAAD,IAAGC,EAAH,EAAGA,aAAH,OACnB,4BACGA,EAAajC,KAAI,SAAAkC,GAAC,OACjB,kBAAC,EAAD,CACEhC,IAAKgC,EAAEH,QACPxC,MAAO2C,EAAE3C,MACTsC,SAAUK,EAAEL,SACZC,UAAWI,EAAEJ,UACbC,QAASG,EAAEH,QACXH,YAAaM,EAAEN,mBAMR,kBAAGO,EAAH,EAAGA,QAASC,EAAZ,EAAYA,UAAZ,OACb,yBAAKzC,UAAU,uBACb,yBAAKA,UAAU,wBACb,4BAAKwC,IAEP,kBAAC,EAAD,CAAcF,aAAcG,MC5CjB,G,MAAA,gBAAGC,EAAH,EAAGA,YAAH,OACb,yBAAK1C,UAAU,gBACb,yBAAKA,UAAU,sBACb,6CAEF,wBAAIA,UAAU,qBACX0C,EAAYrC,KAAI,SAAAsC,GAAE,OACjB,kBAACC,EAAD,CACEJ,QAASG,EAAGH,QACZC,UAAWE,EAAGF,UACdlC,IAAKoC,EAAGH,iB,eCiCHK,E,iLA/BH,IAAD,EAWHC,EAAKC,YAAYC,SATnB3B,EAFK,EAELA,WACAqB,EAHK,EAGLA,YACA7B,EAJK,EAILA,YACAM,EALK,EAKLA,QACAT,EANK,EAMLA,WACAO,EAPK,EAOLA,aACAT,EARK,EAQLA,UACAyC,EATK,EASLA,YACAC,EAVK,EAULA,MAKF,OACE,yBAAKlD,UAAU,OACb,kBAAC,EAAWiD,GACZ,kBAAC,EAAUC,GACX,kBAAC,EAAD,CAAW1C,UAAWA,IACtB,kBAAC,EAAD,CAAYE,WAAYA,IACxB,kBAAC,EAAD,CAAaG,YAAaA,IAC1B,kBAAC,EAAD,CAAcI,aAAcA,IAC5B,kBAAC,EAAD,CAASE,QAASA,IAClB,kBAAC,EAAD,CAAYE,WAAYA,IACxB,kBAAC,EAAD,CAAaqB,YAAaA,S,GA1BhBS,aCJEC,QACW,cAA7BC,OAAOnB,SAASoB,UAEe,UAA7BD,OAAOnB,SAASoB,UAEhBD,OAAOnB,SAASoB,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.520ff0f7.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Header.css\";\n\nexport default ({ name, email, title, github, linkedin, twitter }) => (\n  <header className=\"header\">\n    <div className=\"name\">\n      <h1>{name}</h1>\n    </div>\n    <div className=\"header-title\">\n      <h2>{title}</h2>\n    </div>\n    <div className=\"header-contact\">\n      <div>\n        E-mail: <button className=\"link-button\">{email}</button>\n      </div>\n      <div>\n        Twitter: <a href={twitter.href}>{twitter.name}</a>\n      </div>\n      <div>\n        LinkedIn: <a href={linkedin.href}>{linkedin.name}</a>\n      </div>\n      <div>\n        GitHub: <a href={github.href}>{github.name}</a>\n      </div>\n    </div>\n  </header>\n);\n","import React from \"react\";\n\nimport \"./Blurb.css\";\n\nexport default ({ text, heading }) => (\n  <div className=\"blurb\">\n    {heading && (\n      <div className=\"blurb-heading\">\n        <h3>{heading}</h3>\n      </div>\n    )}\n    {text && (\n      <div className=\"blurb-text\">\n        {text.split(\"\\n\").map(t => (\n          <p key={t}>{t}</p>\n        ))}\n      </div>\n    )}\n  </div>\n);\n","import React from \"react\";\n\nimport \"./LearnNext.css\";\n\nexport default ({ learnNext }) => (\n  <div className=\"learn-next\">\n    <div className=\"learn-next-title\">\n      <h2>Things I Want to Learn Next</h2>\n    </div>\n    <div className=\"learn-next-list\">\n      {learnNext.map(k => (\n        <li key={`${k}`}>{k}</li>\n      ))}\n    </div>\n  </div>\n);\n","import React from \"react\";\n\nimport \"./OpenSource.css\";\n\nexport default ({ openSource }) => (\n  <div className=\"open-source\">\n    <div className=\"open-source-title\">\n      <h2>Open Source</h2>\n    </div>\n    <div className=\"open-source-list\">\n      {openSource.map(i => (\n        <li key={i.projectName}>{i.projectName}</li>\n      ))}\n    </div>\n  </div>\n);\n","import React from \"react\";\n\nimport \"./Programming.css\";\n\nexport default ({ programming }) => (\n  <div className=\"programming\">\n    <div className=\"programming-title\">\n      <h2>Programming Languages and Frameworks</h2>\n    </div>\n    {programming.map(i => (\n      <div className=\"programming-list\" key={i.language}>\n        <li className=\"programming-language\">{i.language}</li>\n        <ul>\n          {i.components.map(component => (\n            <li key={component}>{component}</li>\n          ))}\n        </ul>\n      </div>\n    ))}\n  </div>\n);\n","import React from \"react\";\n\nimport \"./SideProjects.css\";\n\nexport default ({ sideProjects }) => (\n  <div className=\"side-projects\">\n    <div className=\"side-projects-title\">\n      <h2>Side Projects / Things I'm Learning</h2>\n    </div>\n    <div className=\"side-projects-list\">\n      <ul>\n        {sideProjects.map(sideProject => (\n          <li key={sideProject}>{sideProject}</li>\n        ))}\n      </ul>\n    </div>\n  </div>\n);\n","import React from \"react\";\n\nimport \"./Systems.css\";\n\nexport default ({ systems }) => (\n  <div className=\"systems\">\n    <div className=\"systems-title\">\n      <h2>Systems</h2>\n    </div>\n    {systems.map(i => (\n      <div className=\"systems-list\" key={i.platform}>\n        <li className=\"systems-platform\">{i.platform}</li>\n        <ul>\n          {i.components.map(component => (\n            <li key={component}>{component}</li>\n          ))}\n        </ul>\n      </div>\n    ))}\n  </div>\n);\n","import React from \"react\";\n\nimport \"./VendorTech.css\";\n\nexport default ({ vendorTech }) => (\n  <div className=\"vendor-tech\">\n    <div className=\"vendor-tech-title\">\n      <h2>Vendor Technology Experience</h2>\n    </div>\n    {vendorTech.map(i => (\n      <div className=\"vendor-tech-list\" key={i.vendor}>\n        <li className=\"vendor-name\">{i.vendor}</li>\n        <ul>\n          {i.products.map(product => {\n            return product ? <li key={product}>{product}</li> : null;\n          })}\n        </ul>\n      </div>\n    ))}\n  </div>\n);\n","import React from \"react\";\n\nfunction splitUpDescriptionText(desc) {\n  return desc.split(\"\\n\").map(d => <p>{d}</p>);\n}\n\nfunction getYearMonthDay(d) {\n  if (d < 0) return \"Present\";\n  const ds = new Date(Number(d));\n  return ds.getMonth() < 10\n    ? `${ds.getFullYear()}-0${ds.getMonth() + 1}`\n    : `${ds.getFullYear()}-${ds.getMonth() + 1}`;\n}\n\nconst Position = ({ title, description, location, startDate, endDate }) => (\n  <div className=\"work-history-position\">\n    <div className=\"work-history-position-title\">\n      <h4>{title}</h4>\n    </div>\n    <div className=\"work-history-dates\">\n      {getYearMonthDay(startDate)} - {getYearMonthDay(endDate)}\n    </div>\n    <div className=\"work-history-location\">{location}</div>\n    <div className=\"work-history-description\">\n      {splitUpDescriptionText(description)}\n    </div>\n  </div>\n);\n\nconst PositionList = ({ positionList }) => (\n  <ul>\n    {positionList.map(p => (\n      <Position\n        key={p.endDate}\n        title={p.title}\n        location={p.location}\n        startDate={p.startDate}\n        endDate={p.endDate}\n        description={p.description}\n      />\n    ))}\n  </ul>\n);\n\nexport default ({ company, positions }) => (\n  <div className=\"work-history-record\">\n    <div className=\"work-history-company\">\n      <h3>{company}</h3>\n    </div>\n    <PositionList positionList={positions} />\n  </div>\n);\n","import React from \"react\";\nimport WorkItem from \"./WorkItem\";\n\nimport \"./WorkHistory.css\";\n\nexport default ({ workHistory }) => (\n  <div className=\"work-history\">\n    <div className=\"work-history-title\">\n      <h2>Work History</h2>\n    </div>\n    <ul className=\"work-history-list\">\n      {workHistory.map(wh => (\n        <WorkItem\n          company={wh.company}\n          positions={wh.positions}\n          key={wh.company}\n        />\n      ))}\n    </ul>\n  </div>\n);\n","import React, { Component } from \"react\";\n\nimport Header from \"./header/Header\";\nimport Blurb from \"./blurb/Blurb\";\nimport LearnNext from \"./learn-next/LearnNext\";\nimport OpenSource from \"./open-source/OpenSource\";\nimport Programming from \"./programming/Programming\";\nimport SideProjects from \"./side-projects/SideProjects\";\nimport Systems from \"./systems/Systems\";\nimport VendorTech from \"./vendor-tech/VendorTech\";\nimport WorkHistory from \"./work-history/WorkHistory\";\n\nimport \"./App.css\";\n\nimport data from \"./data.json\";\n\nclass App extends Component {\n  render() {\n    const {\n      vendorTech,\n      workHistory,\n      programming,\n      systems,\n      openSource,\n      sideProjects,\n      learnNext,\n      contactInfo,\n      blurb\n    } = data.resume_data.sections;\n    // const keySkills = data.resume_data.sections.keySkills;\n    // const interestingProjects = data.resume_data.sections.interestingProjects;\n    // console.log(`learnNext: ${learnNext}`);\n    return (\n      <div className=\"App\">\n        <Header {...contactInfo} />\n        <Blurb {...blurb} />\n        <LearnNext learnNext={learnNext} />\n        <OpenSource openSource={openSource} />\n        <Programming programming={programming} />\n        <SideProjects sideProjects={sideProjects} />\n        <Systems systems={systems} />\n        <VendorTech vendorTech={vendorTech} />\n        <WorkHistory workHistory={workHistory} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}